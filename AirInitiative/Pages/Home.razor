@page "/"
@inject HttpClient HttpClient
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet

<PageTitle>Home</PageTitle>

<h1>Data</h1>

<ul>
    <li><a href="Алматы_2021.xlsx" download="Алматы_2021.xlsx">Алматы_2021.xlsx - исходный файл</a></li>
    <li><a href="locations.csv" download="locations_2021.csv">locations.csv - описание кодов датчиков</a></li>
    <li><a href="report.csv" download="report_2021.csv">report.csv - собранные данные в 1 CSV файл для удобства анализа</a></li>
</ul>

@* <button class="btn btn-primary" @onclick=Load>Load</button> *@

@if (Reports is not null)
{
    <p>
        Start date: @StartDate - Finish date: @FinishDate
    </p>
    <table class="table table-condensed table-sm">
        <thead>
            <tr>
                <td>Station code</td>
                <td>Location name</td>
                <td>Location</td>
                <td>Automatic?</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in Reports)
            {
                <tr>
                    <td>@report.Code</td>
                    <td>@report.LocationName</td>
                    <td></td>
                    <td>@(report.IsManualCollection ? "No" : "Yes")</td>
                </tr>
                
            }
        </tbody>
    </table>
}

@code {
    private MeasurementReport[]? Reports;
    DateTime StartDate;
    DateTime FinishDate;
    async Task Load()
    {
        var filePath = await HttpClient.GetStreamAsync(@"Алматы_2021.xlsx");
        StartDate = DateTime.UtcNow;
        Reports = await ReportLoader.Load(filePath);
        FinishDate = DateTime.UtcNow;
    }
}
